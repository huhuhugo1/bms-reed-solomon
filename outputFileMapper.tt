#include <sys/stat.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <unistd.h>

class OutputFileMapper {
public:
  char* const CONTENT;
  const size_t SIZE;
private:
  int fd;
public:
  OutputFileMapper(const std::string& file_path, size_t size):
  CONTENT([=] {
    fd = open(file_path.c_str(), O_RDWR | O_CREAT, (mode_t)0600);
    if (fd < 0)
      throw std::runtime_error("Unable to create file " + file_path + "!");

    lseek(fd, size - 1, SEEK_SET);
    write(fd, "", 1);
    auto mapped = mmap(0, size, PROT_WRITE, MAP_SHARED, fd, 0);
    if (mapped == MAP_FAILED)
      throw std::runtime_error("Uname to map file " + file_path + "!");
    return static_cast<char*>(mapped);
  }()),
  
  SIZE(size) {}

  ~OutputFileMapper() {
    msync((void*)CONTENT, SIZE, MS_SYNC);
    munmap((void*)CONTENT, SIZE);
    close(fd);
  }
};
