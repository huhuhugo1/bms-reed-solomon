#include <fstream>
#include <vector>
#include <iostream>
#include <iomanip>
#include <cmath>

#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>

template <size_t N, size_t K>
class Interleaver {
  public:
  const struct {
    const char* CONTENT;
    const size_t SIZE;
  } FILE;
  const size_t PSEUDO_SIZE;
  const size_t NUM_OF_BLOCKS;
  const size_t ALING_SIZE;
  private:
  size_t _block_cnt;

  public: 
    Interleaver(const std::string& file_path, size_t file_size = 0):

      FILE([=]{
        auto fd = open(file_path.c_str(), O_RDONLY);
        if (fd < 0)
          throw std::runtime_error("[Interleaver] Unable to open file " + file_path + "!");
        struct stat s;
        if (fstat(fd, &s) < 0)
          throw std::runtime_error("[Interleaver] Unable to get stat about file " + file_path + "!");
        size_t size = s.st_size;
        auto mapped = mmap(0, size, PROT_READ, MAP_PRIVATE, fd, 0);
        if (mapped == MAP_FAILED)
          throw std::runtime_error("[Interleaver] Uname to map file " + file_path + "!");
        
        decltype(FILE) file = {static_cast<const char*>(mapped), size};
        return file;      
      }()),
      
      //
      PSEUDO_SIZE(file_size ? file_size : FILE.SIZE),
      
      // Set number of RS block
      NUM_OF_BLOCKS(std::ceil(static_cast<double>(PSEUDO_SIZE) / K)),

      //
      ALING_SIZE(K * NUM_OF_BLOCKS),

      
      // Set RS block counter to zero
      _block_cnt(0) {}

    size_t getBlock(std::array<char, N>& block) {
      size_t zeros = 0;
      if (_block_cnt == NUM_OF_BLOCKS)
        return false;

      size_t j = 0;
      for (size_t i = _block_cnt++; i < ALING_SIZE; i += NUM_OF_BLOCKS) {
        if (i < PSEUDO_SIZE) {
          block[j++] = FILE.CONTENT[i];
        } else {
          if (j < K)
            ++zeros;
          block[j++] = 0;
        }
      }

      return K - zeros;
    }
};
